<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>comparable on Forgetful :/</title>
    <link>http://localhost:1313/forgetful/tags/comparable/</link>
    <description>Recent content in comparable on Forgetful :/</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 10 Feb 2020 16:37:31 +0800</lastBuildDate><atom:link href="http://localhost:1313/forgetful/tags/comparable/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang Comparable `==`</title>
      <link>http://localhost:1313/forgetful/2020/02/golang-comparable/</link>
      <pubDate>Mon, 10 Feb 2020 16:37:31 +0800</pubDate>
      
      <guid>http://localhost:1313/forgetful/2020/02/golang-comparable/</guid>
      <description>Golang中的类型   基本类型：整型（int/uint/int8/uint8/int16/uint16/int32/uint32/int64/uint64/byte/rune等）、浮点数（float32/float64）、复数类型（complex64/complex128）、字符串（string）。
  复合类型（又叫聚合类型）：数组和结构体类型。
  引用类型：切片（slice）、map、channel、指针。
  接口类型：如error。
  ==操作的两个操作数类型必须相同，否则编译报错。 复合类型：数组和结构体 数组的长度为类型的一部分，长度不同意味着类型不同，不能比。
 数组：比每个元素，对于不同类型的元素再根据类型递归比下去。 结构体：比每个字段。  引用 比两个引用变量是否指向同一份数据，并不比较实际指向的数据内容。
引用类型中的切片类型和map类型不可比较，只能和nil比较
切片 1 2 3 4 5 6  a := [] interface {}{ 1 , 2.0 } a[1] = a // 切片间接指向自己 fmt.Println(a) // runtime: goroutine stack exceeds 1000000000-byte limit // fatal error: stack overflow   为什么切片不能比较？
可能因为：
 切片和数组类似，但是切片是引用，比较的是是否指向同一份数据，而这种比较方式与数组比较元素的方式完全不一样，容易让程序员混淆。 如果将切片做成比较元素的方式，长度和容量是切片的隐藏字段，长度和容量不一样的切片会采用与数组一样的方式，被认为是类型不一样而编译错误。这样，在大部分情况下，切片的比较都会编译失败。 即使忽略长度和容量不一样，切片元素可以是自身的引用（即切片本身），这样比较会导致堆栈溢出。  所以，golang不让你比较切片。</description>
    </item>
    
  </channel>
</rss>
