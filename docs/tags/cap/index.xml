<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cap on Forgetful :/</title>
    <link>https://murray-liang.github.io/forgetful/tags/cap/</link>
    <description>Recent content in cap on Forgetful :/</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 10 Feb 2020 16:37:31 +0800</lastBuildDate>
    
	<atom:link href="https://murray-liang.github.io/forgetful/tags/cap/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>System Design Topics</title>
      <link>https://murray-liang.github.io/forgetful/2020/02/design-topics/</link>
      <pubDate>Mon, 10 Feb 2020 16:37:31 +0800</pubDate>
      
      <guid>https://murray-liang.github.io/forgetful/2020/02/design-topics/</guid>
      <description>Some high-level trade-offs  Performance vs scalability Latency vs throughput Availability vs consistency  Keep in mind that everything is a trade-off.
Performance vs scalability A service is scalable if it results in increased performance in a manner proportional to resources added. Generally, increasing performance means serving more units of work, but it can also be to handle larger units of work, such as when datasets grow.
Many algorithms that perform reasonably well under low load and small datasets can explode in cost if either requests rates increase, the dataset grows or the number of nodes in the distributed system increases.</description>
    </item>
    
  </channel>
</rss>